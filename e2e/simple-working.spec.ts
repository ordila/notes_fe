import { test, expect } from "@playwright/test";

test.describe("üéØ –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∞—Ü—é—é—á–∏–π E2E —Ç–µ—Å—Ç –∑ –º–æ–∫–∞–º–∏", () => {
  test("‚úÖ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ –º–æ–∫–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏", async ({ page }) => {
    await page.route("**/graphql", async (route) => {
      const request = route.request();
      const postData = request.postData();

      if (postData?.includes("GetNotes")) {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({
            data: {
              notes: [
                {
                  id: "1",
                  title: "–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞",
                  content: "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ—Ç–∞—Ç–∫–∏",
                  tags: ["—Ç–µ—Å—Ç", "playwright"],
                  createdAt: "2024-01-01T12:00:00.000Z",
                  updatedAt: "2024-01-01T12:00:00.000Z",
                  __typename: "Note",
                },
              ],
            },
          }),
        });
      } else {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({ data: {} }),
        });
      }
    });

    await page.goto("/");

    await expect(page.locator("h1")).toBeVisible();
    await expect(page.locator("h1")).toContainText("–°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ç–∞—Ç–æ–∫");

    await expect(
      page.locator("text=GraphQL + NestJS + Supabase")
    ).toBeVisible();

    await expect(
      page.locator('button:has-text("–î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")')
    ).toBeVisible();

    await expect(page.locator('[data-testid="notes-container"]')).toBeVisible();

    await expect(page.locator("text=–ú–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏ (1)")).toBeVisible();

    await expect(page.locator(".note-card")).toHaveCount(1);
    await expect(page.locator(".note-title")).toBeVisible();
    await expect(page.locator(".note-title")).toContainText("–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞");

    await expect(page.locator(".note-content")).toBeVisible();
    await expect(page.locator(".note-content")).toContainText(
      "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ—Ç–∞—Ç–∫–∏"
    );

    await expect(page.locator(".note-tags")).toBeVisible();
    await expect(page.locator(".note-tags")).toContainText("#—Ç–µ—Å—Ç #playwright");

    await expect(page.locator(".note-meta small")).toBeVisible();
    await expect(page.locator(".note-meta small")).toContainText(
      "–°—Ç–≤–æ—Ä–µ–Ω–æ: 01.01.2024"
    );

    console.log("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è –∑ –º–æ–∫–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏!");
  });

  test("üîó –º–æ–∂–Ω–∞ –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑ –º–æ–∫–∞–º–∏", async ({ page }) => {
    await page.route("**/graphql", async (route) => {
      const request = route.request();
      const postData = request.postData();

      if (postData?.includes("GetNotes")) {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({
            data: {
              notes: [],
            },
          }),
        });
      } else {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({ data: {} }),
        });
      }
    });

    await page.goto("/");

    const addButton = page.locator('button:has-text("–î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")');
    await expect(addButton).toBeVisible();

    await addButton.click();

    console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∑ –º–æ–∫–∞–º–∏!");
  });

  test("üåê —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 200", async ({ page }) => {
    const response = await page.goto("/");
    expect(response?.status()).toBe(200);
    console.log("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 200!");
  });
});
