import { test, expect } from "@playwright/test";

test.describe("üéØ –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∞—Ü—é—é—á–∏–π E2E —Ç–µ—Å—Ç –∑ –º–æ–∫–∞–º–∏", () => {
  test("‚úÖ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ –º–æ–∫–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏", async ({ page }) => {
    // –ú–æ–∫—É—î–º–æ GraphQL –∑–∞–ø–∏—Ç GetNotes
    await page.route("**/graphql", async (route) => {
      const request = route.request();
      const postData = request.postData();

      if (postData?.includes("GetNotes")) {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({
            data: {
              notes: [
                {
                  id: "1",
                  title: "–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞",
                  content: "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ—Ç–∞—Ç–∫–∏",
                  tags: ["—Ç–µ—Å—Ç", "playwright"],
                  createdAt: "2024-01-01T00:00:00Z",
                  updatedAt: "2024-01-01T00:00:00Z",
                },
              ],
            },
          }),
        });
      } else {
        // –î–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({ data: {} }),
        });
      }
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    await page.goto("/");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ—Å–Ω—É—î
    await expect(page.locator("h1")).toBeVisible();
    await expect(page.locator("h1")).toContainText("–°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ç–∞—Ç–æ–∫");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ—Å–Ω—É—î
    await expect(
      page.locator("text=GraphQL + NestJS + Supabase")
    ).toBeVisible();

    // –ß–µ–∫–∞—î–º–æ —â–æ –∫–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É" –∑'—è–≤–∏–ª–∞—Å—è (—Ç–µ–ø–µ—Ä –≤–æ–Ω–∞ –º–∞—î –∑'—è–≤–∏—Ç–∏—Å—è)
    await expect(
      page.locator('button:has-text("–î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")')
    ).toBeVisible();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–æ–∫–æ–≤–∞–Ω–∞ –Ω–æ—Ç–∞—Ç–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
    await expect(page.locator("text=–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞")).toBeVisible();

    console.log("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è –∑ –º–æ–∫–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏!");
  });

  test("üîó –º–æ–∂–Ω–∞ –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑ –º–æ–∫–∞–º–∏", async ({ page }) => {
    // –¢–æ–π —Å–∞–º–∏–π –º–æ–∫
    await page.route("**/graphql", async (route) => {
      const request = route.request();
      const postData = request.postData();

      if (postData?.includes("GetNotes")) {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({
            data: {
              notes: [],
            },
          }),
        });
      } else {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({ data: {} }),
        });
      }
    });

    await page.goto("/");

    // –ß–µ–∫–∞—î–º–æ —â–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è
    const addButton = page.locator('button:has-text("–î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")');
    await expect(addButton).toBeVisible();

    // –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await addButton.click();

    console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∑ –º–æ–∫–∞–º–∏!");
  });

  test("üåê —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 200", async ({ page }) => {
    const response = await page.goto("/");
    expect(response?.status()).toBe(200);
    console.log("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 200!");
  });
});
