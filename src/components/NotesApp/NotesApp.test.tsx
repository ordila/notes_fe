import { render, screen } from "../../tests/utils/test-utils";
import NotesApp from "./NotesApp";
import NotesList from "../NotesList/NotesList";
import {
  mockNotes,
  getNotesLoadingMock,
  getNotesErrorMock,
  deleteNoteMock,
} from "../../tests/utils/mocks";

describe("NotesApp", () => {
  it("–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", () => {
    render(<NotesApp />, { mocks: [getNotesLoadingMock] });
    expect(screen.getByText("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫...")).toBeInTheDocument();
  });

  it("–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É", async () => {
    render(<NotesApp />, { mocks: [getNotesErrorMock] });
    const errorMessage = await screen.findByText(/‚ùå –ü–æ–º–∏–ª–∫–∞:/);
    expect(errorMessage).toBeInTheDocument();
  });

  it("NotesList –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –Ω–æ—Ç–∞—Ç–∫–∏", () => {
    const mockOnEdit = jest.fn();
    const mockOnDelete = jest.fn();

    render(
      <NotesList
        notes={mockNotes}
        onEdit={mockOnEdit}
        onDelete={mockOnDelete}
      />,
      { mocks: [deleteNoteMock] }
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –Ω–æ—Ç–∞—Ç–æ–∫
    expect(screen.getByText("–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞ 1")).toBeInTheDocument();
    expect(screen.getByText("–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞ 2")).toBeInTheDocument();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É
    expect(screen.getByText(/–ó–º—ñ—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ 1/)).toBeInTheDocument();
    expect(screen.getByText(/–ó–º—ñ—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ 2/)).toBeInTheDocument();
  });

  it("NotesList –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞–Ω", () => {
    const mockOnEdit = jest.fn();
    const mockOnDelete = jest.fn();

    render(
      <NotesList notes={[]} onEdit={mockOnEdit} onDelete={mockOnDelete} />,
      { mocks: [] }
    );

    expect(screen.getByText("üìù –ü–æ–∫–∏ —â–æ –Ω–æ—Ç–∞—Ç–æ–∫ –Ω–µ–º–∞—î")).toBeInTheDocument();
    expect(
      screen.getByText("–î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É –Ω–æ—Ç–∞—Ç–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏!")
    ).toBeInTheDocument();
  });
});
